---
title: Audit Events
owner: CAPI
---


## <a id='overview'></a> Overview

Audit events help Cloud Foundry operators monitor actions taken against resources (such as apps) via user or system actions.

### <a id='differences'></a> Differences from Other Types of Events

Despite being similar in name, audit events are different from [Cloud Foundry Usage Events](./usage-events.html).
Unlike usage events, audit events are not suitable for app and service billing.

Another tool to help administrators monitor user actions on Cloud Foundry is [Security Event Logging](../../loggregator/cc-uaa-logging.html).
Unlike Security Event Logs, audit events do not cover all API endpoints, but provide more details about a user's actions.

### <a id='view-events'></a> View Events

The easiest way to view events for an app is to use the [Cloud Foundry CLI](../../cf-cli/index.html):

`cf events APP_NAME`

This results in the following output:

```
time                          event                      actor   description
2018-09-04T17:03:49.00-0700   audit.app.droplet.create   admin
2018-09-04T17:03:28.00-0700   audit.app.update           admin   state: STARTED
2018-09-04T17:03:27.00-0700   audit.app.build.create     admin
2018-09-04T17:03:24.00-0700   audit.app.upload-bits      admin
2018-09-04T17:03:24.00-0700   audit.app.map-route        admin
2018-09-04T17:03:24.00-0700   audit.app.create           admin   instances: 1, state: STOPPED, environment_json: [PRIVATE DATA HIDDEN]
```

This command shows the 50 most recent events for that app.
To see more events, or events that are not attributed to an app, use the following Cloud Foundry API endpoint:

`GET /v2/events`

<pre class=‘terminal’>
$ GET /v2/events
{
  "total_results": 3,
  "total_pages": 1,
  "prev_url": null,
  "next_url": null,
  "resources": [
    {
      "metadata": {
        "guid": "b8ede8e1-afc8-40a1-baae-236a0a77b27b",
        "url": "/v2/events/b8ede8e1-afc8-40a1-baae-236a0a77b27b",
        "created_at": "2016-06-08T16:41:23Z",
        "updated_at": "2016-06-08T16:41:26Z"
      },
      "entity": {
        "type": "name-167",
        "actor": "guid-008640fc-d316-4602-9251-c8d09bbdc750",
        "actor_type": "name-168",
        "actor_name": "name-169",
        "actee": "guid-e7790fa4-be2b-4a0f-aa82-c124342b0bb4",
        "actee_type": "name-170",
        "actee_name": "name-171",
        "timestamp": "2016-06-08T16:41:23Z",
        "metadata": {

        },
        "space_guid": "3a1368e7-e3b7-46af-a98d-57b9c71445e7",
        "organization_guid": "86aa12ee-8c4f-4b26-b391-2be6c1730dbc"
      }
    },
    {
      "metadata": {
        "guid": "2ccf53a8-d0eb-4807-9bb9-7dd844e65267",
        "url": "/v2/events/2ccf53a8-d0eb-4807-9bb9-7dd844e65267",
        "created_at": "2016-06-08T16:41:23Z",
        "updated_at": "2016-06-08T16:41:26Z"
      },
      "entity": {
        "type": "name-175",
        "actor": "guid-52cb38f4-d52d-4201-87e3-8e5650efc8c1",
        "actor_type": "name-176",
        "actor_name": "name-177",
        "actee": "guid-5c4214a1-f295-42ae-bd92-38e7cb8be538",
        "actee_type": "name-178",
        "actee_name": "name-179",
        "timestamp": "2016-06-08T16:41:23Z",
        "metadata": {

        },
        "space_guid": "10f0fd9d-dd68-428e-8e93-c00bb8eff0a6",
        "organization_guid": "aa3fdaaa-42c8-4141-bc22-9792c37aa62f"
      }
    },
    {
      "metadata": {
        "guid": "4f9b1fef-2ce4-4877-85e1-0da9114a92cb",
        "url": "/v2/events/4f9b1fef-2ce4-4877-85e1-0da9114a92cb",
        "created_at": "2016-06-08T16:41:23Z",
        "updated_at": "2016-06-08T16:41:26Z"
      },
      "entity": {
        "type": "name-183",
        "actor": "guid-d3be7ed1-1c08-43f6-a20d-5cd9287492e1",
        "actor_type": "name-184",
        "actor_name": "name-185",
        "actee": "guid-9844795f-943d-47ed-a997-2c04ee611f5a",
        "actee_type": "name-186",
        "actee_name": "name-187",
        "timestamp": "2016-06-08T16:41:23Z",
        "metadata": {

        },
        "space_guid": "f9ef235c-25df-4aa1-bcb4-15eec6f92146",
        "organization_guid": "24a920db-f551-46af-bf73-e1db972f652a"
      }
    }
  ]
}
</pre>

For documentation about using this endpoint, see the [API documentation](https://apidocs.cloudfoundry.org/latest-release/events/list_all_events.html).

Events are currently only viewable via the v2 API, but user actions in the [Cloud Foundry v3 API](https://v3-apidocs.cloudfoundry.org/) will still result in audit event creation.

<p class="note"><strong>Note:</strong> <code>get-events</code> is a community-contributed
cf CLI plugin. The plugin provides convenient flags to list events that took place today,
from yesterday, or from a particular date. <code>get-events</code> also provides useful output
formatting options. For more information, see
<a href="https://plugins.cloudfoundry.org/#get-events">get-events</a> in cf CLI Plugins.</p>

## <a id='using-audit-events'></a> Using Audit Events

The following describes some of the intended use cases of audit events.

### <a id='resource-history'></a> Resource History

Usage events allow users, administrators, and operators a view a resource's history. For example, by looking at usage events for an app, an operator will see information such as when it was last updated, if it has crashed recently, etc.

### <a id='querying'></a> Querying For Events

A user is able to query the events endpoint with various filters. For example, a user could query for all events of a given type, or all events associated with a resource since a given timestamp.

Allowed filters are enumerated on the [API documentation](https://apidocs.cloudfoundry.org/latest-release/events/list_all_events.html).

The following example shows a query with multiple filters. The request gets `audit.app.unmap-route` events from a particular time period.

<pre class="terminal">$ cf curl '/v2/events?q=type:audit.app.unmap-route&q=timestamp>2019-02-06T01:08:24Z&q=timestamp&lt;2019-02-08T01:08:24Z&order-by=timestamp'</pre>


### <a id='ext-auditing'></a> External Auditing Warehouse

For auditing and compliance reasons, some operators may wish to keep a record of all audit events that have occurred. Because audit events expire and may be purged during a deploy, these operators must maintain an external data warehouse. This way they can store and access events across expiration events and conform to their own compliance requirements.


## <a id='types'></a> Types of Audit Events

### <a id='app-lifecycle'></a> App Lifecycle (audit.app.*)

- audit.app.apply\_manifest
- audit.app.build.create
- audit.app.copy-bits
- audit.app.create
- audit.app.delete-request
- audit.app.deployment.cancel
- audit.app.deployment.create
- audit.app.droplet.create
- audit.app.droplet.delete
- audit.app.droplet.download
- audit.app.droplet.mapped
- audit.app.droplet.upload
- audit.app.environment.show
- audit.app.environment_variables.show
- audit.app.map-route
- audit.app.package.create
- audit.app.package.delete
- audit.app.package.download
- audit.app.package.upload
- audit.app.process.crash
- audit.app.process.create
- audit.app.process.delete
- audit.app.process.rescheduling
- audit.app.process.scale
- audit.app.process.terminate_instance
- audit.app.process.update
- audit.app.restage
- audit.app.restart
- audit.app.revision.create
- audit.app.revision.environment_variables.show
- audit.app.ssh-authorized
- audit.app.ssh-unauthorized
- audit.app.start
- audit.app.stop
- audit.app.task.cancel
- audit.app.task.create
- audit.app.unmap-route
- audit.app.update
- audit.app.upload-bits


### <a id='org-lifecycle'></a> Organization Lifecycle (audit.organization.*)

- audit.organization.create
- audit.organization.delete-request
- audit.organization.update

### <a id='route-lifecycle'></a> Route Lifecycle (audit.route.*)

- audit.route.create
- audit.route.delete-request
- audit.route.update

### <a id='service-lifecycle'></a> Service Lifecycle (audit.service.*)

- audit.service.create
- audit.service.delete
- audit.service.update

### <a id='service-bind-lifecycle'></a> Service Binding Lifecycle (audit.service_binding.*)

- audit.service\_binding.create
- audit.service\_binding.delete
- audit.service\_binding.start\_create
- audit.service\_binding.start\_delete
- audit.service\_binding.update


### <a id='service-broker-lifecycle'></a> Service Broker Lifecycle (audit.service\_broker.*)

- audit.service\_broker.create
- audit.service\_broker.delete
- audit.service\_broker.update

### <a id='service-dashboard-lifecycle'></a> Service Dashboard Client Lifecycle (audit.service\_dashboard\_client.*)

- audit.service\_dashboard\_client.create
- audit.service\_dashboard\_client.delete

### <a id='service-instance-lifecycle'></a> Service Instance Lifecycle (audit.service\_instance.*)

- audit.service\_instance.bind\_route
- audit.service\_instance.create
- audit.service\_instance.delete
- audit.service\_instance.share
- audit.service\_instance.unbind\_route
- audit.service\_instance.unshare
- audit.service\_instance.update

### <a id='service-route-lifecycle'></a> Service Route Lifecycle (audit.service\_route\_binding.*)

- audit.service\_route\_binding.create
- audit.service\_route\_binding.delete
- audit.service\_route\_binding.start\_create
- audit.service\_route\_binding.start\_delete
- audit.service\_route\_binding.update

### <a id='service-key-lifecycle'></a> Service Key Lifecycle (audit.service\_key.*)

- audit.service\_key.create
- audit.service\_key.delete
- audit.service\_key.start\_create
- audit.service\_key.start\_delete
- audit.service\_key.update

### <a id='service-plan-vis-lifecycle'></a> Service Plan Visibility Lifecycle (audit.service\_plan\_visibility.*)

- audit.service\_plan.delete
- audit.service\_plan\_visibility.create
- audit.service\_plan\_visibility.delete
- audit.service\_plan\_visibility.update

### <a id='space-lifecycle'></a> Space Lifecycle (audit.space.*)

- audit.space.create
- audit.space.delete-request
- audit.space.update

### <a id='user-lifecycle'></a> User Lifecycle (audit.user.*)

- audit.user.organization\_auditor\_add
- audit.user.organization\_auditor\_remove
- audit.user.organization\_billing\_manager\_add
- audit.user.organization\_billing\_manager\_remove
- audit.user.organization\_manager\_add
- audit.user.organization\_manager\_remove
- audit.user.organization\_user\_add
- audit.user.organization\_user\_remove
- audit.user.space\_auditor\_add
- audit.user.space\_auditor\_remove
- audit.user.space\_developer\_add
- audit.user.space\_developer\_remove
- audit.user.space\_manager\_add
- audit.user.space\_manager\_remove

### <a id='user-provided-lifecycle'></a> User-Provided Service Instance Lifecycle (audit.user\_provided\_service\_instance.*)

- audit.user\_provided\_service\_instance.create
- audit.user\_provided\_service\_instance.delete
- audit.user\_provided\_service\_instance.update

### <a id=special-events'></a> Special Events

- audit.app.crash
- blob.remove\_orphan


## <a id='when-are-events-created'></a> When Are Events Created?

Most events are created when a user acts upon a resource.
For example, a user issuing a `cf stop APP_NAME` command causes an `audit.app.stop` event to be created and associated with that user.

* **Service events** (`audit.service*`) are created after the service broker has approved an interaction.

* **Crash and rescheduling events** (`audit.app.crash`, `audit.app.process.crash|rescheduling`) are created when Diego marks an app instance as crashed or evacuates app instances from cells on Diego cell VM restarts.

* **Blob events** (`blob.remove_orphan`) are created by a daily clean up job and do not represent user action.


## <a id='considerations'></a> Considerations

Audit events can be created at any point during the execution of the action they describe. This means the action associated with the event is not guaranteed to have succeeded.

The audit events table can grow to be very large. So, for performance considerations, certain database migrations may result in the truncation of this table.
In other words, this means that a deployment with such a migration will result in a loss of events.

These migrations are exceedingly rare and any release of capi-release that includes one will note this behavior prominently in its [release notes](https://github.com/cloudfoundry/capi-release/releases).

The order of audit events returned from the API may not match the sequence of events that occurred in the system.

Do not rely on timestamps to sequence events; they may come from different Cloud Controller instances whose times could be slightly mismatched.

Audit events expire after 31 days by default. This is configurable using the capi-release manifest property `cc.audit_events.cutoff_age_in_days`.
